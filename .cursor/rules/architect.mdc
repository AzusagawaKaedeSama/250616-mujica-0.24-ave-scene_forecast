---
description: 
globs: 
alwaysApply: true
---
- 系统设计理念：
  - 分层架构是一种软件设计模式，它将系统按照水平方向划分为多个层次，每个层次负责特定的功能和职责，多个层次组合协同提供完整的功能。其本质就是将复杂的问题简单化，基于单一职责原则让每层各司其职，基于高内聚低耦合的设计思想实现相关层对象之间的交互，从而提升系统的可维护性、可扩展性和可测试性。

  - DDD架构：
    1. 统一语言：与业务专家共同创建和使用统一的领域语言，减少误解提高沟通效率。
    2. 领域模型的一致性：领域模型的梳理、对齐、实现贯穿于整个开发过程，确保软件的技术实现与业务模型保持一致。
    3. 复杂性管理：通过实体（Entity）、值对象（Value Object）、聚合（Aggregate）、领域服务（Domain Service）、领域事件（Domain Event）等，帮助开发者在复杂的业务流程中构建出清晰、模块化的技术实现。
    4. 主要分层：
      1. 用户接口层：包含用戶界面、接口和Web服务，负责与用戶交互，收集用戶输入并展示数据。
      2. 应用层：负责协调用戶接口层和领域层之间的交互，通过领域层的实体、用例组装业务逻辑，封装成应用服务。
      3. 领域层：DDD 的核心，这一层通过实体（Entity）、值对象（Value Object）、聚合（Aggregate）、领域服务（Domain Service）和领域事件（Domain Event）等定义了业务概念和业务规则。
      4. 基础层：提供系统的基础服务和资源，如数据库、缓存服务、事件总线等。
    5. 整洁架构目标在于构建一个既健壮又灵活的系统，使核心业务逻辑得以保护，同时降低外部具体技术变化对系统的影响。整洁架构的经典示意图，其中每个同心圆层代表了软件开发中的不同层，越是靠近中心，同心圆层所代表的东西越抽象。可以这么理解，内部的圆层定义的是规则，外部的圆层定义的是实现机制。图中非常关键的是代表依赖方向的几个箭头：只允许外层同心圆依赖内层同心圆。也就是说依赖关系应该始终指向高层次的策略（即业务逻辑和领域模型），而不是低层次的细节（如数据库、UI、框架等），这意味着高层次的模块不应该依赖于低层次的模块。
4.1. 明确的分层依据
1. 基于职责而分层
    分层的第一个依据，就是要保持各层的职责清晰，也就是我们常说的单一职责原则。以 MVC 为例，模型层关注数据，视图层关注展示，控制器层关注业务流程，初期三者的职责清晰。而四层架构为什么要在此基础上引入 Service 层，恰恰就是出现了复用业务逻辑的诉求，人们发现控制器层和模型层都可以做这件事，职责边界变得模糊了，为了让职责回归清晰，不得不再增加一层。
2. 基于变化而分层
    分层的第二个依据，就是如果引起两个模块变化的原因和变化频率不一样，那就应该拆分到不同层，层和层之间最理想的关系是正交关系。所谓正交，是指两条垂直相交的直线唯一的依赖点是这两条直线的相交点，这两条直线不管变长或变短，永远不会对另一条直线产生影响，而斜交的直线，只要有一条长度变化了，总是会投影到了一条直线上，对其产生影响。举个例子，数据库结构的改动影响到数据模型但不应该影响领域模型，同理产品频繁修改需求导致领域模型变动的时候应该保持数据模型的稳定，也就是说，数据模型和领域模型的变化原因和变化频率是不一样的，他们就不应该在同一个层。
4.2. 合理的依赖关系
大部分人固有的认知里，调用关系等同于依赖关系，分层架构的调用关系自顶向下，那依赖关系也应该自顶向下，这是不对的。在架构设计中，一些通用和公共的功能往往被剥离出来，封装成基础库，这些基础库往往会对平台或框架产生直接依赖，例如 JSBridge 库直接依赖了具体的 App。如果领域模型依赖 JSBridge 库实现，也就间接依赖了具体 App。
整洁架构对这种依赖关系提出了不一样的看法：高层不依赖低层，而应该被低层所依赖，这个说法打破了很多人的认知模型：高层领域模型通过调用低层公共库实现业务逻辑，怎么还能反过来让低层依赖？其实，要实现高层不依赖低层，反过来被低层依赖，需要做到两点：
3. 高层依赖抽象接口实现系统解耦 
    高层不依赖于具体实现，而应该依赖抽象接口这其实就是我们常说的依赖倒置原则。通过抽象接口屏蔽具体实现细节，即使低层实现变化了也不会影响高层。例如，控制器层依赖了一个由模型层提供的抽象接口，该接口定义了获取数据的方法，但不涉及具体的数据访问实现细节。这样，当模型层的实现发生变化，比如从 Mysql 迁移到 MongoDB，只要接口不变，控制器层就不需要进行修改。
4. 抽象接口应由高层需求驱动定义
    高层依赖的抽象接口应该由高层定义，而不由低层定义抽象接口由高层定义还是低层定义有什么不一样吗？不就是接口定义文件放置位置的区别吗？其实不然。这句话核心想表达的是：抽象接口应该根据高层需要什么能力来定义，而不是根据低层能提供什么能力来定义。只要做到这样，那么低层就必须根据高层的需要实现具体细节，也就是低层依赖了高层，依赖关系就反转了。举个例子，某系统提供注册会员的功能，在注册过程需要通过用戶服务判断账号是否存在，而用戶服务只提供了是根据用戶账号查询用戶信息的接口。

